package com.serverless;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.serverless.dal.DynamoDBAdapter;
import com.sun.javafx.binding.Logging;
import sun.util.logging.PlatformLogger;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;

@DynamoDBTable(tableName = "CURRENT_SENSOR_TABLE")
public class CurrentSensor {
    private static final String CURRENT_SENSOR = System.getenv("CURRENT_SENSOR_TABLE");
    private final DynamoDBAdapter db_adapter;
    private final Object client;
    private final DynamoDBMapper mapper;
    private final PlatformLogger logger;

    private String id;
    private Number timestamp;
    private Number amper;
    private Number milliamper;
    private Number power;

    public CurrentSensor() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(CURRENT_SENSOR))
                .build();
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
        this.logger = Logging.getLogger();
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey()
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBAttribute(attributeName = "timestamp")
    public Number getTimestamp() {
        return this.timestamp;
    }

    public void setTimestamp(Number timestamp) {
        this.timestamp = timestamp;
    }

    @DynamoDBAttribute(attributeName = "amper")
    public Number getAmper() {
        return this.amper;
    }

    public void setAmper() {
        this.amper = amper;
    }

    @DynamoDBAttribute(attributeName = "milliamper")
    public Number getMilliamper() {
        return this.milliamper;
    }

    public void setMilliamper(Number milliamper) {
        this.milliamper = milliamper;
    }

    @DynamoDBAttribute(attributeName = "power")
    public Number getPower() {
        return this.power;
    }

    public void setPower(Number power) {
        this.power = power;
    }

    // API SAVE
    public void save(CurrentSensor currentSensor) throws IOException {
        logger.info("Products - save(): " + currentSensor.toString());
        this.mapper.save(currentSensor);
    }

    // API LIST
    public List<CurrentSensor> list() throws IOException {
        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();
        List<CurrentSensor> results = this.mapper.scan(CurrentSensor.class, scanExpression);
        for (CurrentSensor currentSensor: results) {
            logger.info("Current Sensors - list(): " + currentSensor.toString());
        }
        return results;
    }

    // API GET
    public CurrentSensor get(String id) throws IOException {
        CurrentSensor currentSensor = null;

        HashMap<String, AttributeValue> attributeValueHashMap = new HashMap<String, AttributeValue>();
        attributeValueHashMap.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<CurrentSensor> queryExpression = new DynamoDBQueryExpression<CurrentSensor>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(attributeValueHashMap);

        PaginatedQueryList<CurrentSensor> result = this.mapper.query(CurrentSensor.class, queryExpression);
        if (result.size() > 0) {
            currentSensor = result.get(0);
            logger.info("CurrentSensor - get(): currentSensor - " + currentSensor.toString());
        } else {
            logger.info("CurrentSensor - get(): currentSensor - NotFound.");
        }
        return currentSensor;
    }
}



